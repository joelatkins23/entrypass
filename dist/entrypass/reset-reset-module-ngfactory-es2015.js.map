{"version":3,"sources":["./src/app/auth/reset/reset-routing.module.ts","./src/app/auth/reset/reset.component.html","./src/app/auth/reset/reset.component.ts","./src/app/auth/reset/reset.module.ts"],"names":[],"mappings":"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","file":"reset-reset-module-ngfactory-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ResetComponent } from './reset.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ResetComponent,\r\n    data: {\r\n      title: 'Reset'\r\n    }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ResetRoutingModule { }\r\n","<div class=\"web-sign-section\">\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xl-8 col-lg-9 col-md-12 col-sm-12 col-12 m-auto wow fadeInUp\" data-wow-delay=\"0.2s\">\r\n        <div class=\"bgwhite boxshadow-2 border-radius8 mt-50 pt-20 pb-20 pl-15 pr-15\">\r\n          <div class=\"row\">\r\n            <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 col-12 m-auto\">\r\n              <div class=\"sign-bock bgwhite pt-10 pb-10 pl-10 pr-10\">\r\n                <div class=\"text-center\">\r\n                  <!-- <img src=\"images/logo.svg\" class=\"sign-logo\"> -->\r\n                  <h4 class=\"fontsize-26 fontfamily-bold colorblack text-uppercase mt-0 mb-10\">Reset password</h4>\r\n                  <p class=\"fontsize-14 fontfamily-medium color4848 mb-50\">Enter your new password and confirm to reset</p>\r\n                  <form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n                    <div class=\"form-group input-rw-tp\" [ngClass]=\"(form.controls['pass'].errors && form.controls['pass'].errors.required && submited) ? 'mb-0':''\">\r\n                      <input name=\"new_pass\" [(ngModel)]=\"Password\"  placeholder=\"New Password\" required type=\"password\" formControlName=\"pass\" class=\"form-control input-tp-1\">\r\n                      <i class=\"fa fa-check-circle check-g\"></i>\r\n                    </div>\r\n                    <div *ngIf=\"form.controls['pass'].errors && form.controls['pass'].errors.required && submited\" class=\"alert-danger text-left\">Password is required</div>\r\n                    <div class=\"form-group input-rw-tp\" [ngClass]=\"(form.controls['confirm_pass'].errors && form.controls['confirm_pass'].errors.required && submited) ? 'mb-0':''\">\r\n                      <input name=\"confirm_pass\"  [(ngModel)]=\"ConfirmPassword\" placeholder=\"Confirm Password\" required type=\"password\" formControlName=\"confirm_pass\" class=\"form-control input-tp-1\">\r\n                      <i class=\"fa fa-check-circle check-g\"></i>\r\n                    </div>                      \r\n                    <div *ngIf=\"form.controls['confirm_pass'].errors && form.controls['confirm_pass'].errors.required && submited\" class=\"alert-danger text-left\">Confirm Password is required</div>\r\n                    <div *ngIf=\"form.controls['confirm_pass'].errors && form.controls['confirm_pass'].errors.mustMatch && submited\" class=\"alert-danger text-left\">Confirm Password has to be equal with Password</div>                  \r\n                    <div class=\"form-group input-rw-tp mt-30 mb-0\">\r\n                      <button type=\"submit\" class=\"btn btn-large btn-rad-24\">Submit</button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { ApisService } from 'src/app/services/apis.service';\r\nimport { Router, NavigationExtras, ActivatedRoute } from '@angular/router';\r\nimport {FormGroup,FormControl,FormBuilder, Validators} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-reset',\r\n  templateUrl: './reset.component.html',\r\n  styleUrls: ['./reset.component.scss']\r\n})\r\nexport class ResetComponent implements OnInit { \r\n  submited = false;\r\n  Password=\"\";\r\n  ConfirmPassword=\"\";\r\n  token: any;\r\n  constructor(\r\n    private api: ApisService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private formbuilder:FormBuilder\r\n  ) {\r\n    this.route.queryParams.subscribe(data => {\r\n        if (data && data.token) {\r\n          this.token = data.token;\r\n        }\r\n      });\r\n  }\r\n  ngOnInit() {\r\n    document.querySelector('body').setAttribute('themebg-pattern', 'theme1');\r\n  } \r\n  form = this.formbuilder.group({\r\n      pass:new FormControl('',[Validators.required]),\r\n      confirm_pass:new FormControl('',[Validators.required])\r\n  },{validator:this.mustmatch('pass','confirm_pass')})\r\n \r\n  get f() { return this.form.controls; }\r\n    mustmatch(controlName:string,matchingControlName:string)\r\n    {\r\n        return (formGroup:FormGroup)=>\r\n        {\r\n            const control = formGroup.controls[controlName];\r\n            const matchingControl = formGroup.controls[matchingControlName];\r\n    \r\n            if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n                // return if another validator has already found an error on the matchingControl\r\n                return;\r\n            }\r\n    \r\n            // set error on matchingControl if validation fails\r\n            if (control.value !== matchingControl.value) {\r\n                matchingControl.setErrors({ mustMatch: true });\r\n            } else {\r\n                matchingControl.setErrors(null);\r\n            }\r\n        }\r\n    }\r\n    submit()\r\n    {\r\n        this.submited = true;\r\n\r\n        if(this.form.invalid)\r\n        {\r\n            return;\r\n        }\r\n        var formdata={\r\n            \"Token\":this.token,\r\n            \"Password\":this.Password\r\n        }\r\n        this.api.ChangePass(formdata).subscribe(res => {\r\n            if(res['result']){\r\n                this.router.navigate(['auth/login']);   \r\n            }\r\n            \r\n        }, err => {\r\n            console.log(err);\r\n        });\r\n       \r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ResetComponent } from './reset.component';\r\nimport { ResetRoutingModule } from './reset-routing.module';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { NgxSpinnerModule } from 'ngx-spinner';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ResetRoutingModule,\r\n    SharedModule,\r\n    NgxSpinnerModule\r\n  ],\r\n  declarations: [ResetComponent]\r\n})\r\nexport class ResetModule { }\r\n"],"sourceRoot":"webpack:///"}